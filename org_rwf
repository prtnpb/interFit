#!/usr/bin/perl
#################################################################
# Author: Patrick R. Thomas, Jr.                                #
# e-mail: prtnpb@mail.umkc.edu                                  #
# Purpose:  The purpose of this script is organize the          #
#           numerical wavefunction output after the rscf2       #
#           program completes its cycles.                       #
#                                                               #
# Inputs: rwnf.out - wavefunction file must be the output form  #
#                    of readrwf tool in Grasp2K                 #
#                                                               #
# Outputs: Numerous files will be created of the form           #
#          Elemsymbol_n_principalqnumber_k_kappa.txt            #
#                                                               #
#################################################################

use strict;
use warnings;
use Env;



my $wavefile="rwfn.out";
my $iso="isodata";
my $line;
my @values;
my @file;
my @radial;
my @large;
my @small;
my $i=1;
my $j=0;
my $filelen;
my $filename;
my @iso;
my $value;

open(INFILE,"<$wavefile") or die "$wavefile could not be opened.\n";
@file=<INFILE>;
close (INFILE);

open(ISO,"<$iso") or die "$iso could not be opened.\n";
@iso=<ISO>;
close(ISO);

$filelen=@file;

for($i=1;$i ne $filelen; $i++){

  @values = &prepLine("",$file[$i],'\s+');

  if(($#values+1)==4){
	$filename=&atomnumtosymbol($iso[1])."_n_".$values[0]."_k_".$values[1].".dat";
	@large= @file[$i+2 .. $i+1+$values[3]];
	@small= @file[$i+2+$values[3] .. $i+1+(2*$values[3])];
	@radial=@file[$i+2+(2*$values[3]) .. $i+1+(3*$values[3])]; 

	for(@large){s/D/E/g;}
	for(@small){s/D/E/g;}
	for(@radial){s/D/E/g;}

	open(OUTFILE,">$filename") or die "$filename could not be opened.\n";
        print OUTFILE "Number_Terms: $values[3]\n";
	print OUTFILE "Energy = $values[2]\n";
	print OUTFILE "Radial\tLarge\tLargedivr\tLargedivrneg\tSmall\tSmalldivr\tSmalldivrneg\n";
	for($j=0;$j ne $values[3];$j++){
	  if($j==0){
	    print OUTFILE sprintf("%01.12E",&prepLine("",$radial[$j],'\s+'));
	    print OUTFILE "\t";
	    print OUTFILE sprintf("%01.12E",&prepLine("",$large[$j],'\s+'));
	    print OUTFILE "\t";
	    print OUTFILE sprintf("%01.12E",&prepLine("",$large[$j],'\s+'));
	    print OUTFILE "\t";
	    print OUTFILE sprintf("%01.12E",&prepLine("",$large[$j],'\s+'));
	    print OUTFILE "\t";
	    print OUTFILE sprintf("%01.12E",&prepLine("",$small[$j],'\s+'));
	    print OUTFILE "\t";
	    print OUTFILE sprintf("%01.12E",&prepLine("",$small[$j],'\s+'));
	    print OUTFILE "\t";
	    print OUTFILE sprintf("%01.12E",&prepLine("",$small[$j],'\s+'));
	    print OUTFILE "\n";
	  }
	  else{
       	    print OUTFILE sprintf("%01.12E",&prepLine("",$radial[$j],'\s+'));
	    print OUTFILE "\t";
            $value=($large[$j]);
            $value=~s/e/E/g;
	    print OUTFILE sprintf("%01.12E",&prepLine("",$value,'\s+'));
	    print OUTFILE "\t";
            $value=($large[$j]/$radial[$j]);
            $value=~s/e/E/g;
	    print OUTFILE sprintf("%01.12E",&prepLine("",$value,'\s+'));
	    print OUTFILE "\t";
            $value=-1*($large[$j]/$radial[$j]);
            $value=~s/e/E/g;
	    print OUTFILE sprintf("%01.12E",&prepLine("",$value,'\s+'));
	    print OUTFILE "\t";
            $value=($small[$j]);
            $value=~s/e/E/g;
	    print OUTFILE sprintf("%01.12E",&prepLine("",$value,'\s+'));
	    print OUTFILE "\t";
            $value=($small[$j]/$radial[$j]);
            $value=~s/e/E/g;
	    print OUTFILE sprintf("%01.12E",&prepLine("",$value,'\s+'));
	    print OUTFILE "\t";
            $value=-1*($small[$j]/$radial[$j]);
            $value=~s/e/E/g;
	    print OUTFILE sprintf("%01.12E",&prepLine("",$value,'\s+'));
	    print OUTFILE "\n";
	  }
	}
	close(OUTFILE);
  }
}




sub prepLine
{
   # Define passed parameters.
   my $fileHandle = $_[0];
   my $line = $_[1];
   my $splitter = $_[2];

   # Declare local variables.
   my @values;

   # Read the line if necessary.
   if ("$fileHandle" ne "")
      {$line =<$fileHandle>;}

   # Chomp, split, and shift it.
   chomp $line;
   @values = split(/$splitter/,$line);
   if ($values[0] eq "")
      {shift @values;}

   return @values;
}

sub atomnumtosymbol
{
   my $atomnum = $_[0]-1;

   my $symbol;

   my @elems = qw(H He Li Be B C N O F Ne Na Mg Al Si P S Cl Ar K Ca Sc Ti V Cr Mn Fe Co Ni Cu Zn Ga Ge As Se Br Kr Rb Sr Y Zr Nb Mo Tc Ru Rh Pd Ag Cd In Sn Sb Te I Xe Cs Ba La Ce Pr Nd Pm Sm Eu Gd Tb Dy Ho Er Tm Yb Lu Hf Ta W Re Os Ir Pt Au Hg Tl Pb Bi Po At Rn Fr Ra Ac Th Pa U Np Pu Am Cm Bk Cf Es Fm Md No Lr Rf Db Sg Bh Hs Mt);

  return $elems[$atomnum]; 
}
